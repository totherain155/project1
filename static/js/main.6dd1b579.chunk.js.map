{"version":3,"sources":["assets/unnamed.jpg","Components/Section.js","Components/Loader.js","Components/Error.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyle.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Title","Grid","Section","title","children","Loader","role","aria-label","Text","span","props","color","Error","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","default","length","substring","HomePresenter","nowPlaying","upcoming","popular","error","loading","Helmet","map","movie","original_title","poster_path","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","tvApi","HomeContainer","useState","setNowPlaying","setUpcoming","setPopular","setError","setLoading","useEffect","a","data","results","fetchApi","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","setTopRated","setAiringToday","console","log","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","setMovieResults","setTvResults","setSearchTerm","searchByTerm","event","preventDefault","target","Header","header","HeaderList","ul","HeaderItem","li","current","MLink","Link","withRouter","pathname","location","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Item","Divider","Overview","p","Logo","logo","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","item","index","name","href","homepage","production_companies","logo_path","origin_country","width","height","url","videos","key","overview","DetailContainer","setResult","match","push","history","parsedId","parseInt","includes","isNaN","path","exact","component","Home","TV","Search","Detail","from","GlobalStyle","createGlobalStyle","reset","App","Router","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd1b579.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/unnamed.a058e5b7.jpg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  // 마지막 영역엔 margin을 주지 않는다.\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 30px;\r\n`;\r\n\r\n// children의 역할\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <Container>\r\n      <Title>{title}</Title>\r\n      <Grid>{children}</Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]).isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 35px;\r\n`;\r\n\r\nconst Loader = () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      ⏳\r\n    </span>\r\n  </Container>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Error = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nError.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n  font-size: 13px;\r\n`;\r\nconst Image = styled.div`\r\n  background-image: url(${(props) => props.bgUrl});\r\n  height: 180px;\r\n  background-size: cover;\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.3s ease-in-out;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n  bottom: 7px;\r\n  position: absolute;\r\n  right: 5px;\r\n  color: white;\r\n  opacity: 0;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n  &:hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n    ${Rating} {\r\n      opacity: 0.7;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/tv/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          bgUrl={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n              : require(\"../assets/unnamed.jpg\").default\r\n          }\r\n        />\r\n        <Rating>\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ⭐\r\n          </span>{\" \"}\r\n          {rating}/10\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>\r\n        {title.length > 15 ? `${title.substring(0, 19)}...` : title}\r\n      </Title>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n\r\n  imageUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div``;\r\n\r\n// Section에서의 stylying과 HomePresenter에서의 styling의 차이\r\n\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Movie</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n          <Section title=\"Now Playing list\">\r\n            {nowPlaying.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average}\r\n                //substring method를 이용하여 연도 뒤에 숫자는 잘라준다.\r\n                //release_date의 정보가 없을 경우 빈 문자열을 출력하여 에러를 방지한다.\r\n                year={\r\n                  movie.release_date ? movie.release_date.substring(0, 4) : \"\"\r\n                }\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular list\">\r\n            {popular.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average}\r\n                //substring method를 이용하여 연도 뒤에 숫자는 잘라준다.\r\n                year={\r\n                  movie.release_date ? movie.release_date.substring(0, 4) : \"\"\r\n                }\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {upcoming && upcoming.length > 0 && (\r\n          <Section title=\"Upcoming list\">\r\n            {upcoming.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average}\r\n                //substring method를 이용하여 연도 뒤에 숫자는 잘라준다.\r\n\r\n                year={\r\n                  movie.release_date ? movie.release_date.substring(0, 4) : \"\"\r\n                }\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Error color=\"#d63031;\" text={error} />}\r\n      </Container>\r\n    )}\r\n    ;\r\n  </>\r\n);\r\nHomePresenter.propTypes = {\r\n  nowPlaying: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import axios from \"axios\";\r\n\r\n// Axios의 좋은 점은, Axios의 인스턴스를 configure(설정) 해줄 수 있다는 점이다.\r\n// baseURL과 파라미터들을 미리 설정해놓고 중복을 막는다.\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"1bf672789b8c690173890a9905ec5cbe\",\r\n    language: \"en-US\",\r\n  },\r\n});\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  //다른 함수와 달리 id를 요구한다.\r\n  movieDetail: (id) =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: term,\r\n      },\r\n    }),\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  tvDetail: (id) =>\r\n    api.get(`tv/${id}`, {\r\n      // api_key, language에 더해 append_to_response를 파라미터로 가질 수 있다.\r\n      // 이런 방식은 파라미터를 개별적으로 설정해놓을 수 있다.\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: term,\r\n      },\r\n    }),\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"./../../api\";\r\n\r\nconst HomeContainer = () => {\r\n  // useState 여러개 만들어야 할 듯 기본값은 null, false 등등\r\n  const [nowPlaying, setNowPlaying] = useState(null);\r\n  const [upcoming, setUpcoming] = useState(null);\r\n  const [popular, setPopular] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // useEffet, axios, try catch 사용하여 class component의 componentDidMount를 대체\r\n\r\n  /*useEffect 내부에서 async/await를 사용하고 싶다면, 함수 내부에 async 키워드가 붙은 또 다른 함수를 만들어서 사용해야 한다. */\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const {\r\n          data: { results: nowPlaying },\r\n        } = await moviesApi.nowPlaying();\r\n        // console.log(nowPlaying);\r\n        const {\r\n          data: { results: upcoming },\r\n        } = await moviesApi.upcoming();\r\n        const {\r\n          data: { results: popular },\r\n        } = await moviesApi.popular();\r\n\r\n        //class component의 setState를 아래와 같이 대신할 수 있다.\r\n        //바뀐 state는 nowPlaying state에 저장된다.\r\n\r\n        setNowPlaying(nowPlaying);\r\n        setUpcoming(upcoming);\r\n        setPopular(popular);\r\n      } catch {\r\n        setError(\"Can't get Movies\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  return (\r\n    <HomePresenter\r\n      nowPlaying={nowPlaying}\r\n      upcoming={upcoming}\r\n      popular={popular}\r\n      error={error}\r\n      loading={loading}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div``;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TVShow </title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {topRated && topRated.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {topRated.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                //substring method를 이용하여 연도 뒤에 숫자는 잘라준다.\r\n                //first_air_date의 정보가 없을 경우 빈 문자열을 출력하여 에러를 방지한다.\r\n                year={\r\n                  show.first_air_date ? show.first_air_date.substring(0, 4) : \"\"\r\n                }\r\n                // isMovie 의 기본값을 false로 해놨기 때문에 생략 가능하다.\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}{\" \"}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Shows\">\r\n            {popular.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={\r\n                  show.first_air_date ? show.first_air_date.substring(0, 4) : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}{\" \"}\r\n        {airingToday && airingToday.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {airingToday.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={\r\n                  show.first_air_date ? show.first_air_date.substring(0, 4) : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}{\" \"}\r\n        {error && <Error color=\"#d63031;\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import { tvApi } from \"api\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\n\r\nconst TVContainer = () => {\r\n  const [topRated, setTopRated] = useState(null);\r\n  const [popular, setPopular] = useState(null);\r\n  const [airingToday, setAiringToday] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const {\r\n          data: { results: topRated },\r\n        } = await tvApi.topRated();\r\n        const {\r\n          data: { results: popular },\r\n        } = await tvApi.popular();\r\n        const {\r\n          data: { results: airingToday },\r\n        } = await tvApi.airingToday();\r\n\r\n        console.log(topRated, popular, airingToday);\r\n        setAiringToday(airingToday);\r\n        setTopRated(topRated);\r\n        setPopular(popular);\r\n        //  throw Error();\r\n      } catch {\r\n        setError(\"Can't get TV Show\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  return (\r\n    <TVPresenter\r\n      topRated={topRated}\r\n      popular={popular}\r\n      airingToday={airingToday}\r\n      loading={loading}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div``;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 25px;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  searchTerm,\r\n  loading,\r\n  error,\r\n  handleSubmit,\r\n  updateTerm,\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title> Search </title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      {/** input을 제어하기 위해 value에 searchTerm을 넣는다.*/}\r\n      <Input\r\n        placeholder=\"Search Movies or TV Shows...\"\r\n        value={searchTerm}\r\n        onChange={updateTerm}\r\n      />\r\n    </Form>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average}\r\n                //substring method를 이용하여 연도 뒤에 숫자는 잘라준다.\r\n                year={\r\n                  movie.release_date ? movie.release_date.substring(0, 4) : \"\"\r\n                }\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Show Results\">\r\n            {tvResults.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                //substring method를 이용하여 연도 뒤에 숫자는 잘라준다.\r\n                year={\r\n                  show.first_air_date ? show.first_air_date.substring(0, 4) : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Error color=\"#d63031;\" text={error} />}\r\n        {tvResults &&\r\n          movieResults &&\r\n          movieResults.length === 0 &&\r\n          tvResults.length === 0 && (\r\n            <Error text=\"Nothing found\" color=\"#b2bec3\" />\r\n          )}\r\n      </>\r\n    )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  searchTerm: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi } from \"./../../api\";\r\nimport { tvApi } from \"api\";\r\n\r\nconst SearchContainer = () => {\r\n  const [movieResults, setMovieResults] = useState(null);\r\n  const [tvResults, setTvResults] = useState(null);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSubmit = (event) => {\r\n    // enter를 통해 자동적으로 submit되며 새로고침되는 것을 방지해준다.\r\n    event.preventDefault();\r\n    if (searchTerm !== \"\") {\r\n      searchByTerm();\r\n    }\r\n  };\r\n\r\n  const updateTerm = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    console.log(value);\r\n    setSearchTerm(value);\r\n    // search input reset 할것\r\n  };\r\n\r\n  /*test용 코드\r\n\r\n  useEffect(() => {\r\n    handleSubmit();\r\n  });\r\n*/\r\n  const searchByTerm = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n      console.log(movieResults, tvResults);\r\n      setMovieResults(movieResults);\r\n      setTvResults(tvResults);\r\n      // throw Error();\r\n    } catch {\r\n      setError(\"Can't find results\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchPresenter\r\n      movieResults={movieResults}\r\n      tvResults={tvResults}\r\n      searchTerm={searchTerm}\r\n      loading={loading}\r\n      error={error}\r\n      handleSubmit={handleSubmit}\r\n      updateTerm={updateTerm}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchContainer;\r\n","import React, { useState } from \"react\";\r\n/*Link 컴포넌트를 사용하여 페이지를 전환하면, 페이지를 새로 불러오지 않고 애플리케이션은 \r\n그대로 유지한 상태에서 HTML5 History API를 사용하여 페이지의 주소만 변경해 준다. */\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  background-color: black;\r\n  // 스크롤이 길어져도 상단에 고정시킨다.\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 20px;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst HeaderList = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst HeaderItem = styled.li`\r\n  &:not(:last-child) {\r\n    margin-right: 30px;\r\n  }\r\n  /* 기본값은 투명하게 설정한다. withRouter로 불러온 location속 pathname 경로가 true가 되면\r\n  border-bottom 라인을 red로 한다. */\r\n  border-bottom: 2px solid ${(props) => (props.current ? \"red\" : \"transparent\")};\r\n  transition: border-bottom ease-in-out 0.7s;\r\n  width: 50px;\r\n  height: 20px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n`;\r\n\r\nconst MLink = styled(Link)`\r\n  color: white;\r\n  font-weight: 700;\r\n`;\r\n\r\n// withRouter 함수는 라우트로 사용된 컴포넌트가 아니어도 match, location, history 객체를 접근할 수 있게 해준다.\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <HeaderList>\r\n      <HeaderItem current={pathname === \"/\"}>\r\n        <MLink to=\"/\">Movies</MLink>\r\n      </HeaderItem>\r\n      <HeaderItem current={pathname === \"/tv\"}>\r\n        <MLink to=\"/tv\">TV</MLink>\r\n      </HeaderItem>\r\n      <HeaderItem current={pathname === \"/search\"}>\r\n        <MLink to=\"/search\">Search</MLink>\r\n      </HeaderItem>\r\n    </HeaderList>\r\n  </Header>\r\n));\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px);\r\n  opacity: 0.6;\r\n  position: absolute;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n  z-index: 1;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 30%;\r\n  height: 100%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n  margin-bottom: 10px;\r\n`; // span은 margin 값을 갖지 않는다.\r\n\r\nconst ItemContainer = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0px 15px; // 위아래는 0이고 좌우는 15px margin\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 12px;\r\n  opacity: 0.7;\r\n  line-height: 1.3;\r\n  width: 50%;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  background-image: url(${(props) => props.logo});\r\n  height: 100%;\r\n  width: 30%;\r\n  z-index: 1;\r\n  background-position: center center;\r\n  background-size: cover;\r\n`;\r\nconst Video = styled.div``;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading...</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {\" \"}\r\n          {result.original_title ? result.original_title : result.original_name}\r\n        </title>\r\n      </Helmet>\r\n      <Backdrop\r\n        bgImage={`https://image.tmdb.org/t/p/original/${result.backdrop_path}`}\r\n      />\r\n      <Content>\r\n        <Cover\r\n          bgImage={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/w300/${result.poster_path}`\r\n              : require(`../../assets/unnamed.jpg`).default\r\n          }\r\n        />\r\n        <Data>\r\n          <Title>\r\n            {result.original_title\r\n              ? result.original_title\r\n              : result.original_name}\r\n          </Title>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date ? result.release_date.substring(0, 4) : \"\"}\r\n              {\r\n                result.first_air_date\r\n                  ? result.first_air_date.substring(0, 4)\r\n                  : \"\" /*연도가 없을경우 나타나는 에러처리 */\r\n              }\r\n            </Item>\r\n            <Divider>•</Divider>\r\n            <Item>{result.runtime || result.episode_run_time} min</Item>\r\n            <Divider>•</Divider>\r\n            <Item>\r\n              {result.genres.map((item, index) =>\r\n                index === result.genres.length - 1\r\n                  ? item.name\r\n                  : `${item.name} / `\r\n              )}\r\n            </Item>\r\n            <Divider>•</Divider>\r\n            <a href={result.homepage} target=\"_blank\">\r\n              <Item>HomePage</Item>\r\n            </a>\r\n            <Divider>•</Divider>\r\n            <Logo\r\n              logo={result.production_companies.map((item) => (\r\n                <span>{`https://image.tmdb.org/t/p/w300/${item.logo_path}`}</span>\r\n              ))}\r\n            />\r\n            <Divider>•</Divider>\r\n            <Item>\r\n              {/**배열의 여러 요소중 중복방지를 위해 첫번째 국가정보만 반영한다. */}\r\n              {result.production_companies.map((item, index) => {\r\n                if (index === 0) {\r\n                  return <span>{item.origin_country}</span>;\r\n                }\r\n              })}\r\n            </Item>\r\n            <Divider>•</Divider>\r\n          </ItemContainer>\r\n          <ReactPlayer\r\n            width=\"500px\"\r\n            height=\"300px\"\r\n            url={`https://www.youtube.com/watch?v=${\r\n              result.videos && result.videos.results.map((item) => item.key)\r\n            }`}\r\n          />\r\n          <Overview>{result.overview}</Overview>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi } from \"./../../api\";\r\nimport { tvApi } from \"api\";\r\n\r\nconst DetailContainer = (props) => {\r\n  const [result, setResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // parameter로 넘겨진 id값을 받고\r\n    const {\r\n      params: { id },\r\n    } = props.match;\r\n    const {\r\n      history: { push },\r\n    } = props;\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n    console.log(props);\r\n    //숫자가 아닌 string형태로 넘겨진 id는 다시 홈으로 push해준다.\r\n    const parsedId = parseInt(id);\r\n    const isMovie = pathname.includes(\"/movie/\");\r\n\r\n    if (isNaN(parsedId)) {\r\n      //함수를 종료하기 위해서 return을 사용해 준다.\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    const fetchApi = async () => {\r\n      try {\r\n        if (isMovie) {\r\n          ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n        } else {\r\n          ({ data: result } = await tvApi.tvDetail(parsedId));\r\n        }\r\n        console.log(result);\r\n        setResult(result);\r\n      } catch {\r\n        setError(\"Can't find anything\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  return <DetailPresenter result={result} error={error} loading={loading} />;\r\n};\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Search from \"Routes/Search\";\r\nimport Header from \"./Header\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n  <>\r\n    <Router>\r\n      <>\r\n        <Header />\r\n        {/*Switch는 한번에 하나의 Route만 render시켜준다. */}\r\n        <Switch>\r\n          {/*동시에 라우팅이 적용되는 것을 막기 위해 exact를 사용해준다. */}\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/tv\" exact component={TV} />\r\n          <Route path=\"/search\" exact component={Search} />\r\n          {/*유동적인 값을 전달할 때는 파라미터로 특정 아이디를 전달하게 된다. */}\r\n          <Route path=\"/movie/:id\" exact component={Detail} />\r\n          <Route path=\"/tv/:id\" exact component={Detail} />\r\n          {/*일치하는 router없다면 \"/\"로 보내줄 것이다. */}\r\n          <Redirect from=\"*\" to=\"/\" />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n  </>\r\n);\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\n// styled-components는 local에서 동작하기 때문에 global한 css를 만들기 위해선 'styled-reset'을 설치해주고 ${reset}으로 사용한다.\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  \r\n  ${reset};\r\n  a{\r\n      text-decoration: none;\r\n  }\r\n  *{\r\n     box-sizing: border-box;\r\n   }\r\n   body{\r\n       font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n       font-size:13px;\r\n       padding-top:80px;\r\n   }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { useState } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport axios from \"axios\";\n\nfunction App() {\n  return (\n    // Fragments는 원하는 수만큼의 컴포넌트를 return할 수 있게 해준다.\n    <>\n      <Router />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// jsconfig.json의 설정덕분에 src를 기준으로 경로 지정이 가능하다.\nimport App from \"Components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./api\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}